// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ProposalContract {

    struct Proposal {
        string title; // Title of the proposal
        string description; // Description of the proposal
        uint256 approve; // Number of approve votes
        uint256 reject; // Number of reject votes
        uint256 pass; // Number of pass votes
        uint256 total_vote_to_end; // When the total votes in the proposal reaches this limit, proposal ends
        bool current_state; // This shows the current state of the proposal, meaning whether it passes or fails
        bool is_active; // This shows if others can vote to our contract
    }

    mapping(uint256 => Proposal) public proposal_history; // Recordings of previous proposals
    uint256 public proposal_count; // Counter for proposal IDs

    // Event to be emitted when a proposal is created
    event ProposalCreated(uint256 proposalId, string title, string description, uint256 totalVoteToEnd);

    // Event to be emitted when a vote is cast
    event Voted(uint256 proposalId, string voteType, uint256 voteCount);

    // Function to create a new proposal
    function createProposal(string memory _title, string memory _description, uint256 _totalVoteToEnd) public {
        proposal_count++;
        Proposal memory newProposal = Proposal({
            title: _title,
            description: _description,
            approve: 0,
            reject: 0,
            pass: 0,
            total_vote_to_end: _totalVoteToEnd,
            current_state: false,
            is_active: true
        });

        proposal_history[proposal_count] = newProposal;

        emit ProposalCreated(proposal_count, _title, _description, _totalVoteToEnd);
    }

}
